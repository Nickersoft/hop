{
  "version": 3,
  "sources": ["../node_modules/commander/lib/error.js", "../node_modules/commander/lib/argument.js", "../node_modules/commander/lib/help.js", "../node_modules/commander/lib/option.js", "../node_modules/commander/lib/command.js", "../node_modules/commander/index.js", "../src/main.ts"],
  "sourcesContent": ["// @ts-check\n\n/**\n * CommanderError class\n * @class\n */\nclass CommanderError extends Error {\n  /**\n   * Constructs the CommanderError class\n   * @param {number} exitCode suggested exit code which could be used with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @constructor\n   */\n  constructor(exitCode, code, message) {\n    super(message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.exitCode = exitCode;\n    this.nestedError = undefined;\n  }\n}\n\n/**\n * InvalidArgumentError class\n * @class\n */\nclass InvalidArgumentError extends CommanderError {\n  /**\n   * Constructs the InvalidArgumentError class\n   * @param {string} [message] explanation of why argument is invalid\n   * @constructor\n   */\n  constructor(message) {\n    super(1, 'commander.invalidArgument', message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n  }\n}\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\n", "const { InvalidArgumentError } = require('./error.js');\n\n// @ts-check\n\nclass Argument {\n  /**\n   * Initialize a new command argument with the given name and description.\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   */\n\n  constructor(name, description) {\n    this.description = description || '';\n    this.variadic = false;\n    this.parseArg = undefined;\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.argChoices = undefined;\n\n    switch (name[0]) {\n      case '<': // e.g. <required>\n        this.required = true;\n        this._name = name.slice(1, -1);\n        break;\n      case '[': // e.g. [optional]\n        this.required = false;\n        this._name = name.slice(1, -1);\n        break;\n      default:\n        this.required = true;\n        this._name = name;\n        break;\n    }\n\n    if (this._name.length > 3 && this._name.slice(-3) === '...') {\n      this.variadic = true;\n      this._name = this._name.slice(0, -3);\n    }\n  }\n\n  /**\n   * Return argument name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    return this._name;\n  };\n\n  /**\n   * @api private\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {any} value\n   * @param {string} [description]\n   * @return {Argument}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  };\n\n  /**\n   * Set the custom handler for processing CLI command arguments into argument values.\n   *\n   * @param {Function} [fn]\n   * @return {Argument}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  };\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Argument}\n   */\n\n  choices(values) {\n    this.argChoices = values;\n    this.parseArg = (arg, previous) => {\n      if (!values.includes(arg)) {\n        throw new InvalidArgumentError(`Allowed choices are ${values.join(', ')}.`);\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  };\n}\n\n/**\n * Takes an argument and returns its human readable equivalent for help usage.\n *\n * @param {Argument} arg\n * @return {string}\n * @api private\n */\n\nfunction humanReadableArgName(arg) {\n  const nameOutput = arg.name() + (arg.variadic === true ? '...' : '');\n\n  return arg.required\n    ? '<' + nameOutput + '>'\n    : '[' + nameOutput + ']';\n}\n\nexports.Argument = Argument;\nexports.humanReadableArgName = humanReadableArgName;\n", "const { humanReadableArgName } = require('./argument.js');\n\n/**\n * TypeScript import types for JSDoc, used by Visual Studio Code IntelliSense and `npm run typescript-checkJS`\n * https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#import-types\n * @typedef { import(\"./argument.js\").Argument } Argument\n * @typedef { import(\"./command.js\").Command } Command\n * @typedef { import(\"./option.js\").Option } Option\n */\n\n// @ts-check\n\n// Although this is a class, methods are static in style to allow override using subclass or just functions.\nclass Help {\n  constructor() {\n    this.helpWidth = undefined;\n    this.sortSubcommands = false;\n    this.sortOptions = false;\n  }\n\n  /**\n   * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Command[]}\n   */\n\n  visibleCommands(cmd) {\n    const visibleCommands = cmd.commands.filter(cmd => !cmd._hidden);\n    if (cmd._hasImplicitHelpCommand()) {\n      // Create a command matching the implicit help command.\n      const [, helpName, helpArgs] = cmd._helpCommandnameAndArgs.match(/([^ ]+) *(.*)/);\n      const helpCommand = cmd.createCommand(helpName)\n        .helpOption(false);\n      helpCommand.description(cmd._helpCommandDescription);\n      if (helpArgs) helpCommand.arguments(helpArgs);\n      visibleCommands.push(helpCommand);\n    }\n    if (this.sortSubcommands) {\n      visibleCommands.sort((a, b) => {\n        // @ts-ignore: overloaded return type\n        return a.name().localeCompare(b.name());\n      });\n    }\n    return visibleCommands;\n  }\n\n  /**\n   * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleOptions(cmd) {\n    const visibleOptions = cmd.options.filter((option) => !option.hidden);\n    // Implicit help\n    const showShortHelpFlag = cmd._hasHelpOption && cmd._helpShortFlag && !cmd._findOption(cmd._helpShortFlag);\n    const showLongHelpFlag = cmd._hasHelpOption && !cmd._findOption(cmd._helpLongFlag);\n    if (showShortHelpFlag || showLongHelpFlag) {\n      let helpOption;\n      if (!showShortHelpFlag) {\n        helpOption = cmd.createOption(cmd._helpLongFlag, cmd._helpDescription);\n      } else if (!showLongHelpFlag) {\n        helpOption = cmd.createOption(cmd._helpShortFlag, cmd._helpDescription);\n      } else {\n        helpOption = cmd.createOption(cmd._helpFlags, cmd._helpDescription);\n      }\n      visibleOptions.push(helpOption);\n    }\n    if (this.sortOptions) {\n      const getSortKey = (option) => {\n        // WYSIWYG for order displayed in help with short before long, no special handling for negated.\n        return option.short ? option.short.replace(/^-/, '') : option.long.replace(/^--/, '');\n      };\n      visibleOptions.sort((a, b) => {\n        return getSortKey(a).localeCompare(getSortKey(b));\n      });\n    }\n    return visibleOptions;\n  }\n\n  /**\n   * Get an array of the arguments if any have a description.\n   *\n   * @param {Command} cmd\n   * @returns {Argument[]}\n   */\n\n  visibleArguments(cmd) {\n    // Side effect! Apply the legacy descriptions before the arguments are displayed.\n    if (cmd._argsDescription) {\n      cmd._args.forEach(argument => {\n        argument.description = argument.description || cmd._argsDescription[argument.name()] || '';\n      });\n    }\n\n    // If there are any arguments with a description then return all the arguments.\n    if (cmd._args.find(argument => argument.description)) {\n      return cmd._args;\n    };\n    return [];\n  }\n\n  /**\n   * Get the command term to show in the list of subcommands.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandTerm(cmd) {\n    // Legacy. Ignores custom usage string, and nested commands.\n    const args = cmd._args.map(arg => humanReadableArgName(arg)).join(' ');\n    return cmd._name +\n      (cmd._aliases[0] ? '|' + cmd._aliases[0] : '') +\n      (cmd.options.length ? ' [options]' : '') + // simplistic check for non-help option\n      (args ? ' ' + args : '');\n  }\n\n  /**\n   * Get the option term to show in the list of options.\n   *\n   * @param {Option} option\n   * @returns {string}\n   */\n\n  optionTerm(option) {\n    return option.flags;\n  }\n\n  /**\n   * Get the argument term to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @returns {string}\n   */\n\n  argumentTerm(argument) {\n    return argument.name();\n  }\n\n  /**\n   * Get the longest command term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestSubcommandTermLength(cmd, helper) {\n    return helper.visibleCommands(cmd).reduce((max, command) => {\n      return Math.max(max, helper.subcommandTerm(command).length);\n    }, 0);\n  };\n\n  /**\n   * Get the longest option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestOptionTermLength(cmd, helper) {\n    return helper.visibleOptions(cmd).reduce((max, option) => {\n      return Math.max(max, helper.optionTerm(option).length);\n    }, 0);\n  };\n\n  /**\n   * Get the longest argument term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestArgumentTermLength(cmd, helper) {\n    return helper.visibleArguments(cmd).reduce((max, argument) => {\n      return Math.max(max, helper.argumentTerm(argument).length);\n    }, 0);\n  };\n\n  /**\n   * Get the command usage to be displayed at the top of the built-in help.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandUsage(cmd) {\n    // Usage\n    let cmdName = cmd._name;\n    if (cmd._aliases[0]) {\n      cmdName = cmdName + '|' + cmd._aliases[0];\n    }\n    let parentCmdNames = '';\n    for (let parentCmd = cmd.parent; parentCmd; parentCmd = parentCmd.parent) {\n      parentCmdNames = parentCmd.name() + ' ' + parentCmdNames;\n    }\n    return parentCmdNames + cmdName + ' ' + cmd.usage();\n  }\n\n  /**\n   * Get the description for the command.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandDescription(cmd) {\n    // @ts-ignore: overloaded return type\n    return cmd.description();\n  }\n\n  /**\n   * Get the command description to show in the list of subcommands.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandDescription(cmd) {\n    // @ts-ignore: overloaded return type\n    return cmd.description();\n  }\n\n  /**\n   * Get the option description to show in the list of options.\n   *\n   * @param {Option} option\n   * @return {string}\n   */\n\n  optionDescription(option) {\n    if (option.negate) {\n      return option.description;\n    }\n    const extraInfo = [];\n    if (option.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${option.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`);\n    }\n    if (option.defaultValue !== undefined) {\n      extraInfo.push(`default: ${option.defaultValueDescription || JSON.stringify(option.defaultValue)}`);\n    }\n    if (extraInfo.length > 0) {\n      return `${option.description} (${extraInfo.join(', ')})`;\n    }\n    return option.description;\n  };\n\n  /**\n   * Get the argument description to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @return {string}\n   */\n\n  argumentDescription(argument) {\n    const extraInfo = [];\n    if (argument.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${argument.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`);\n    }\n    if (argument.defaultValue !== undefined) {\n      extraInfo.push(`default: ${argument.defaultValueDescription || JSON.stringify(argument.defaultValue)}`);\n    }\n    if (extraInfo.length > 0) {\n      const extraDescripton = `(${extraInfo.join(', ')})`;\n      if (argument.description) {\n        return `${argument.description} ${extraDescripton}`;\n      }\n      return extraDescripton;\n    }\n    return argument.description;\n  }\n\n  /**\n   * Generate the built-in help text.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {string}\n   */\n\n  formatHelp(cmd, helper) {\n    const termWidth = helper.padWidth(cmd, helper);\n    const helpWidth = helper.helpWidth || 80;\n    const itemIndentWidth = 2;\n    const itemSeparatorWidth = 2; // between term and description\n    function formatItem(term, description) {\n      if (description) {\n        const fullText = `${term.padEnd(termWidth + itemSeparatorWidth)}${description}`;\n        return helper.wrap(fullText, helpWidth - itemIndentWidth, termWidth + itemSeparatorWidth);\n      }\n      return term;\n    };\n    function formatList(textArray) {\n      return textArray.join('\\n').replace(/^/gm, ' '.repeat(itemIndentWidth));\n    }\n\n    // Usage\n    let output = [`Usage: ${helper.commandUsage(cmd)}`, ''];\n\n    // Description\n    const commandDescription = helper.commandDescription(cmd);\n    if (commandDescription.length > 0) {\n      output = output.concat([commandDescription, '']);\n    }\n\n    // Arguments\n    const argumentList = helper.visibleArguments(cmd).map((argument) => {\n      return formatItem(helper.argumentTerm(argument), helper.argumentDescription(argument));\n    });\n    if (argumentList.length > 0) {\n      output = output.concat(['Arguments:', formatList(argumentList), '']);\n    }\n\n    // Options\n    const optionList = helper.visibleOptions(cmd).map((option) => {\n      return formatItem(helper.optionTerm(option), helper.optionDescription(option));\n    });\n    if (optionList.length > 0) {\n      output = output.concat(['Options:', formatList(optionList), '']);\n    }\n\n    // Commands\n    const commandList = helper.visibleCommands(cmd).map((cmd) => {\n      return formatItem(helper.subcommandTerm(cmd), helper.subcommandDescription(cmd));\n    });\n    if (commandList.length > 0) {\n      output = output.concat(['Commands:', formatList(commandList), '']);\n    }\n\n    return output.join('\\n');\n  }\n\n  /**\n   * Calculate the pad width from the maximum term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  padWidth(cmd, helper) {\n    return Math.max(\n      helper.longestOptionTermLength(cmd, helper),\n      helper.longestSubcommandTermLength(cmd, helper),\n      helper.longestArgumentTermLength(cmd, helper)\n    );\n  };\n\n  /**\n   * Wrap the given string to width characters per line, with lines after the first indented.\n   * Do not wrap if insufficient room for wrapping (minColumnWidth), or string is manually formatted.\n   *\n   * @param {string} str\n   * @param {number} width\n   * @param {number} indent\n   * @param {number} [minColumnWidth=40]\n   * @return {string}\n   *\n   */\n\n  wrap(str, width, indent, minColumnWidth = 40) {\n    // Detect manually wrapped and indented strings by searching for line breaks\n    // followed by multiple spaces/tabs.\n    if (str.match(/[\\n]\\s+/)) return str;\n    // Do not wrap if not enough room for a wrapped column of text (as could end up with a word per line).\n    const columnWidth = width - indent;\n    if (columnWidth < minColumnWidth) return str;\n\n    const leadingStr = str.substr(0, indent);\n    const columnText = str.substr(indent);\n\n    const indentString = ' '.repeat(indent);\n    const regex = new RegExp('.{1,' + (columnWidth - 1) + '}([\\\\s\\u200B]|$)|[^\\\\s\\u200B]+?([\\\\s\\u200B]|$)', 'g');\n    const lines = columnText.match(regex) || [];\n    return leadingStr + lines.map((line, i) => {\n      if (line.slice(-1) === '\\n') {\n        line = line.slice(0, line.length - 1);\n      }\n      return ((i > 0) ? indentString : '') + line.trimRight();\n    }).join('\\n');\n  }\n}\n\nexports.Help = Help;\n", "const { InvalidArgumentError } = require('./error.js');\n\n// @ts-check\n\nclass Option {\n  /**\n   * Initialize a new `Option` with the given `flags` and `description`.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   */\n\n  constructor(flags, description) {\n    this.flags = flags;\n    this.description = description || '';\n\n    this.required = flags.includes('<'); // A value must be supplied when the option is specified.\n    this.optional = flags.includes('['); // A value is optional when the option is specified.\n    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument\n    this.variadic = /\\w\\.\\.\\.[>\\]]$/.test(flags); // The option can take multiple values.\n    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\n    const optionFlags = splitOptionFlags(flags);\n    this.short = optionFlags.shortFlag;\n    this.long = optionFlags.longFlag;\n    this.negate = false;\n    if (this.long) {\n      this.negate = this.long.startsWith('--no-');\n    }\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.parseArg = undefined;\n    this.hidden = false;\n    this.argChoices = undefined;\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {any} value\n   * @param {string} [description]\n   * @return {Option}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  };\n\n  /**\n   * Set the custom handler for processing CLI option arguments into option values.\n   *\n   * @param {Function} [fn]\n   * @return {Option}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  };\n\n  /**\n   * Whether the option is mandatory and must have a value after parsing.\n   *\n   * @param {boolean} [mandatory=true]\n   * @return {Option}\n   */\n\n  makeOptionMandatory(mandatory = true) {\n    this.mandatory = !!mandatory;\n    return this;\n  };\n\n  /**\n   * Hide option in help.\n   *\n   * @param {boolean} [hide=true]\n   * @return {Option}\n   */\n\n  hideHelp(hide = true) {\n    this.hidden = !!hide;\n    return this;\n  };\n\n  /**\n   * @api private\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Option}\n   */\n\n  choices(values) {\n    this.argChoices = values;\n    this.parseArg = (arg, previous) => {\n      if (!values.includes(arg)) {\n        throw new InvalidArgumentError(`Allowed choices are ${values.join(', ')}.`);\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  };\n\n  /**\n   * Return option name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    if (this.long) {\n      return this.long.replace(/^--/, '');\n    }\n    return this.short.replace(/^-/, '');\n  };\n\n  /**\n   * Return option name, in a camelcase format that can be used\n   * as a object attribute key.\n   *\n   * @return {string}\n   * @api private\n   */\n\n  attributeName() {\n    return camelcase(this.name().replace(/^no-/, ''));\n  };\n\n  /**\n   * Check if `arg` matches the short or long flag.\n   *\n   * @param {string} arg\n   * @return {boolean}\n   * @api private\n   */\n\n  is(arg) {\n    return this.short === arg || this.long === arg;\n  };\n}\n\n/**\n * Convert string from kebab-case to camelCase.\n *\n * @param {string} str\n * @return {string}\n * @api private\n */\n\nfunction camelcase(str) {\n  return str.split('-').reduce((str, word) => {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Split the short and long flag out of something like '-m,--mixed <value>'\n *\n * @api private\n */\n\nfunction splitOptionFlags(flags) {\n  let shortFlag;\n  let longFlag;\n  // Use original very loose parsing to maintain backwards compatibility for now,\n  // which allowed for example unintended `-sw, --short-word` [sic].\n  const flagParts = flags.split(/[ |,]+/);\n  if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1])) shortFlag = flagParts.shift();\n  longFlag = flagParts.shift();\n  // Add support for lone short flag without significantly changing parsing!\n  if (!shortFlag && /^-[^-]$/.test(longFlag)) {\n    shortFlag = longFlag;\n    longFlag = undefined;\n  }\n  return { shortFlag, longFlag };\n}\n\nexports.Option = Option;\nexports.splitOptionFlags = splitOptionFlags;\n", "const EventEmitter = require('events').EventEmitter;\nconst childProcess = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\n\nconst { Argument, humanReadableArgName } = require('./argument.js');\nconst { CommanderError } = require('./error.js');\nconst { Help } = require('./help.js');\nconst { Option, splitOptionFlags } = require('./option.js');\n\n// @ts-check\n\nclass Command extends EventEmitter {\n  /**\n   * Initialize a new `Command`.\n   *\n   * @param {string} [name]\n   */\n\n  constructor(name) {\n    super();\n    /** @type {Command[]} */\n    this.commands = [];\n    /** @type {Option[]} */\n    this.options = [];\n    this.parent = null;\n    this._allowUnknownOption = false;\n    this._allowExcessArguments = true;\n    /** @type {Argument[]} */\n    this._args = [];\n    /** @type {string[]} */\n    this.args = []; // cli args with options removed\n    this.rawArgs = [];\n    this.processedArgs = []; // like .args but after custom processing and collecting variadic\n    this._scriptPath = null;\n    this._name = name || '';\n    this._optionValues = {};\n    this._storeOptionsAsProperties = false;\n    this._actionHandler = null;\n    this._executableHandler = false;\n    this._executableFile = null; // custom name for executable\n    this._defaultCommandName = null;\n    this._exitCallback = null;\n    this._aliases = [];\n    this._combineFlagAndOptionalValue = true;\n    this._description = '';\n    this._argsDescription = undefined; // legacy\n    this._enablePositionalOptions = false;\n    this._passThroughOptions = false;\n    this._lifeCycleHooks = {}; // a hash of arrays\n    /** @type {boolean | string} */\n    this._showHelpAfterError = false;\n\n    // see .configureOutput() for docs\n    this._outputConfiguration = {\n      writeOut: (str) => process.stdout.write(str),\n      writeErr: (str) => process.stderr.write(str),\n      getOutHelpWidth: () => process.stdout.isTTY ? process.stdout.columns : undefined,\n      getErrHelpWidth: () => process.stderr.isTTY ? process.stderr.columns : undefined,\n      outputError: (str, write) => write(str)\n    };\n\n    this._hidden = false;\n    this._hasHelpOption = true;\n    this._helpFlags = '-h, --help';\n    this._helpDescription = 'display help for command';\n    this._helpShortFlag = '-h';\n    this._helpLongFlag = '--help';\n    this._addImplicitHelpCommand = undefined; // Deliberately undefined, not decided whether true or false\n    this._helpCommandName = 'help';\n    this._helpCommandnameAndArgs = 'help [command]';\n    this._helpCommandDescription = 'display help for command';\n    this._helpConfiguration = {};\n  }\n\n  /**\n   * Define a command.\n   *\n   * There are two styles of command: pay attention to where to put the description.\n   *\n   * Examples:\n   *\n   *      // Command implemented using action handler (description is supplied separately to `.command`)\n   *      program\n   *        .command('clone <source> [destination]')\n   *        .description('clone a repository into a newly created directory')\n   *        .action((source, destination) => {\n   *          console.log('clone command called');\n   *        });\n   *\n   *      // Command implemented using separate executable file (description is second parameter to `.command`)\n   *      program\n   *        .command('start <service>', 'start named service')\n   *        .command('stop [service]', 'stop named service, or all if no name supplied');\n   *\n   * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`\n   * @param {Object|string} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)\n   * @param {Object} [execOpts] - configuration options (for executable)\n   * @return {Command} returns new command for action handler, or `this` for executable command\n   */\n\n  command(nameAndArgs, actionOptsOrExecDesc, execOpts) {\n    let desc = actionOptsOrExecDesc;\n    let opts = execOpts;\n    if (typeof desc === 'object' && desc !== null) {\n      opts = desc;\n      desc = null;\n    }\n    opts = opts || {};\n    const [, name, args] = nameAndArgs.match(/([^ ]+) *(.*)/);\n    const cmd = this.createCommand(name);\n\n    if (desc) {\n      cmd.description(desc);\n      cmd._executableHandler = true;\n    }\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n\n    cmd._outputConfiguration = this._outputConfiguration;\n\n    cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden\n    cmd._hasHelpOption = this._hasHelpOption;\n    cmd._helpFlags = this._helpFlags;\n    cmd._helpDescription = this._helpDescription;\n    cmd._helpShortFlag = this._helpShortFlag;\n    cmd._helpLongFlag = this._helpLongFlag;\n    cmd._helpCommandName = this._helpCommandName;\n    cmd._helpCommandnameAndArgs = this._helpCommandnameAndArgs;\n    cmd._helpCommandDescription = this._helpCommandDescription;\n    cmd._helpConfiguration = this._helpConfiguration;\n    cmd._exitCallback = this._exitCallback;\n    cmd._storeOptionsAsProperties = this._storeOptionsAsProperties;\n    cmd._combineFlagAndOptionalValue = this._combineFlagAndOptionalValue;\n    cmd._allowExcessArguments = this._allowExcessArguments;\n    cmd._enablePositionalOptions = this._enablePositionalOptions;\n    cmd._showHelpAfterError = this._showHelpAfterError;\n\n    cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor\n    if (args) cmd.arguments(args);\n    this.commands.push(cmd);\n    cmd.parent = this;\n\n    if (desc) return this;\n    return cmd;\n  };\n\n  /**\n   * Factory routine to create a new unattached command.\n   *\n   * See .command() for creating an attached subcommand, which uses this routine to\n   * create the command. You can override createCommand to customise subcommands.\n   *\n   * @param {string} [name]\n   * @return {Command} new command\n   */\n\n  createCommand(name) {\n    return new Command(name);\n  };\n\n  /**\n   * You can customise the help with a subclass of Help by overriding createHelp,\n   * or by overriding Help properties using configureHelp().\n   *\n   * @return {Help}\n   */\n\n  createHelp() {\n    return Object.assign(new Help(), this.configureHelp());\n  };\n\n  /**\n   * You can customise the help by overriding Help properties using configureHelp(),\n   * or with a subclass of Help by overriding createHelp().\n   *\n   * @param {Object} [configuration] - configuration options\n   * @return {Command|Object} `this` command for chaining, or stored configuration\n   */\n\n  configureHelp(configuration) {\n    if (configuration === undefined) return this._helpConfiguration;\n\n    this._helpConfiguration = configuration;\n    return this;\n  }\n\n  /**\n   * The default output goes to stdout and stderr. You can customise this for special\n   * applications. You can also customise the display of errors by overriding outputError.\n   *\n   * The configuration properties are all functions:\n   *\n   *    // functions to change where being written, stdout and stderr\n   *    writeOut(str)\n   *    writeErr(str)\n   *    // matching functions to specify width for wrapping help\n   *    getOutHelpWidth()\n   *    getErrHelpWidth()\n   *    // functions based on what is being written out\n   *    outputError(str, write) // used for displaying errors, and not used for displaying help\n   *\n   * @param {Object} [configuration] - configuration options\n   * @return {Command|Object} `this` command for chaining, or stored configuration\n   */\n\n  configureOutput(configuration) {\n    if (configuration === undefined) return this._outputConfiguration;\n\n    Object.assign(this._outputConfiguration, configuration);\n    return this;\n  }\n\n  /**\n   * Display the help or a custom message after an error occurs.\n   *\n   * @param {boolean|string} [displayHelp]\n   * @return {Command} `this` command for chaining\n   */\n  showHelpAfterError(displayHelp = true) {\n    if (typeof displayHelp !== 'string') displayHelp = !!displayHelp;\n    this._showHelpAfterError = displayHelp;\n    return this;\n  }\n\n  /**\n   * Add a prepared subcommand.\n   *\n   * See .command() for creating an attached subcommand which inherits settings from its parent.\n   *\n   * @param {Command} cmd - new subcommand\n   * @param {Object} [opts] - configuration options\n   * @return {Command} `this` command for chaining\n   */\n\n  addCommand(cmd, opts) {\n    if (!cmd._name) throw new Error('Command passed to .addCommand() must have a name');\n\n    // To keep things simple, block automatic name generation for deeply nested executables.\n    // Fail fast and detect when adding rather than later when parsing.\n    function checkExplicitNames(commandArray) {\n      commandArray.forEach((cmd) => {\n        if (cmd._executableHandler && !cmd._executableFile) {\n          throw new Error(`Must specify executableFile for deeply nested executable: ${cmd.name()}`);\n        }\n        checkExplicitNames(cmd.commands);\n      });\n    }\n    checkExplicitNames(cmd.commands);\n\n    opts = opts || {};\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation\n\n    this.commands.push(cmd);\n    cmd.parent = this;\n    return this;\n  };\n\n  /**\n   * Factory routine to create a new unattached argument.\n   *\n   * See .argument() for creating an attached argument, which uses this routine to\n   * create the argument. You can override createArgument to return a custom argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @return {Argument} new argument\n   */\n\n  createArgument(name, description) {\n    return new Argument(name, description);\n  };\n\n  /**\n   * Define argument syntax for command.\n   *\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @example\n   *\n   *     program.argument('<input-file>');\n   *     program.argument('[output-file]');\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @param {Function|*} [fn] - custom argument processing function\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n  argument(name, description, fn, defaultValue) {\n    const argument = this.createArgument(name, description);\n    if (typeof fn === 'function') {\n      argument.default(defaultValue).argParser(fn);\n    } else {\n      argument.default(fn);\n    }\n    this.addArgument(argument);\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding multiple at once (without descriptions).\n   *\n   * See also .argument().\n   *\n   * @example\n   *\n   *     program.arguments('<cmd> [env]');\n   *\n   * @param {string} names\n   * @return {Command} `this` command for chaining\n   */\n\n  arguments(names) {\n    names.split(/ +/).forEach((detail) => {\n      this.argument(detail);\n    });\n    return this;\n  };\n\n  /**\n   * Define argument syntax for command, adding a prepared argument.\n   *\n   * @param {Argument} argument\n   * @return {Command} `this` command for chaining\n   */\n  addArgument(argument) {\n    const previousArgument = this._args.slice(-1)[0];\n    if (previousArgument && previousArgument.variadic) {\n      throw new Error(`only the last argument can be variadic '${previousArgument.name()}'`);\n    }\n    if (argument.required && argument.defaultValue !== undefined && argument.parseArg === undefined) {\n      throw new Error(`a default value for a required argument is never used: '${argument.name()}'`);\n    }\n    this._args.push(argument);\n    return this;\n  }\n\n  /**\n   * Override default decision whether to add implicit help command.\n   *\n   *    addHelpCommand() // force on\n   *    addHelpCommand(false); // force off\n   *    addHelpCommand('help [cmd]', 'display help for [cmd]'); // force on with custom details\n   *\n   * @return {Command} `this` command for chaining\n   */\n\n  addHelpCommand(enableOrNameAndArgs, description) {\n    if (enableOrNameAndArgs === false) {\n      this._addImplicitHelpCommand = false;\n    } else {\n      this._addImplicitHelpCommand = true;\n      if (typeof enableOrNameAndArgs === 'string') {\n        this._helpCommandName = enableOrNameAndArgs.split(' ')[0];\n        this._helpCommandnameAndArgs = enableOrNameAndArgs;\n      }\n      this._helpCommandDescription = description || this._helpCommandDescription;\n    }\n    return this;\n  };\n\n  /**\n   * @return {boolean}\n   * @api private\n   */\n\n  _hasImplicitHelpCommand() {\n    if (this._addImplicitHelpCommand === undefined) {\n      return this.commands.length && !this._actionHandler && !this._findCommand('help');\n    }\n    return this._addImplicitHelpCommand;\n  };\n\n  /**\n   * Add hook for life cycle event.\n   *\n   * @param {string} event\n   * @param {Function} listener\n   * @return {Command} `this` command for chaining\n   */\n\n  hook(event, listener) {\n    const allowedValues = ['preAction', 'postAction'];\n    if (!allowedValues.includes(event)) {\n      throw new Error(`Unexpected value for event passed to hook : '${event}'.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    if (this._lifeCycleHooks[event]) {\n      this._lifeCycleHooks[event].push(listener);\n    } else {\n      this._lifeCycleHooks[event] = [listener];\n    }\n    return this;\n  }\n\n  /**\n   * Register callback to use as replacement for calling process.exit.\n   *\n   * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing\n   * @return {Command} `this` command for chaining\n   */\n\n  exitOverride(fn) {\n    if (fn) {\n      this._exitCallback = fn;\n    } else {\n      this._exitCallback = (err) => {\n        if (err.code !== 'commander.executeSubCommandAsync') {\n          throw err;\n        } else {\n          // Async callback from spawn events, not useful to throw.\n        }\n      };\n    }\n    return this;\n  };\n\n  /**\n   * Call process.exit, and _exitCallback if defined.\n   *\n   * @param {number} exitCode exit code for using with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @return never\n   * @api private\n   */\n\n  _exit(exitCode, code, message) {\n    if (this._exitCallback) {\n      this._exitCallback(new CommanderError(exitCode, code, message));\n      // Expecting this line is not reached.\n    }\n    process.exit(exitCode);\n  };\n\n  /**\n   * Register callback `fn` for the command.\n   *\n   * Examples:\n   *\n   *      program\n   *        .command('help')\n   *        .description('display verbose help')\n   *        .action(function() {\n   *           // output help here\n   *        });\n   *\n   * @param {Function} fn\n   * @return {Command} `this` command for chaining\n   */\n\n  action(fn) {\n    const listener = (args) => {\n      // The .action callback takes an extra parameter which is the command or options.\n      const expectedArgsCount = this._args.length;\n      const actionArgs = args.slice(0, expectedArgsCount);\n      if (this._storeOptionsAsProperties) {\n        actionArgs[expectedArgsCount] = this; // backwards compatible \"options\"\n      } else {\n        actionArgs[expectedArgsCount] = this.opts();\n      }\n      actionArgs.push(this);\n\n      return fn.apply(this, actionArgs);\n    };\n    this._actionHandler = listener;\n    return this;\n  };\n\n  /**\n   * Factory routine to create a new unattached option.\n   *\n   * See .option() for creating an attached option, which uses this routine to\n   * create the option. You can override createOption to return a custom option.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @return {Option} new option\n   */\n\n  createOption(flags, description) {\n    return new Option(flags, description);\n  };\n\n  /**\n   * Add an option.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addOption(option) {\n    const oname = option.name();\n    const name = option.attributeName();\n\n    let defaultValue = option.defaultValue;\n\n    // preassign default value for --no-*, [optional], <required>, or plain flag if boolean value\n    if (option.negate || option.optional || option.required || typeof defaultValue === 'boolean') {\n      // when --no-foo we make sure default is true, unless a --foo option is already defined\n      if (option.negate) {\n        const positiveLongFlag = option.long.replace(/^--no-/, '--');\n        defaultValue = this._findOption(positiveLongFlag) ? this.getOptionValue(name) : true;\n      }\n      // preassign only if we have a default\n      if (defaultValue !== undefined) {\n        this.setOptionValue(name, defaultValue);\n      }\n    }\n\n    // register the option\n    this.options.push(option);\n\n    // when it's passed assign the value\n    // and conditionally invoke the callback\n    this.on('option:' + oname, (val) => {\n      const oldValue = this.getOptionValue(name);\n\n      // custom processing\n      if (val !== null && option.parseArg) {\n        try {\n          val = option.parseArg(val, oldValue === undefined ? defaultValue : oldValue);\n        } catch (err) {\n          if (err.code === 'commander.invalidArgument') {\n            const message = `error: option '${option.flags}' argument '${val}' is invalid. ${err.message}`;\n            this._displayError(err.exitCode, err.code, message);\n          }\n          throw err;\n        }\n      } else if (val !== null && option.variadic) {\n        val = option._concatValue(val, oldValue);\n      }\n\n      // unassigned or boolean value\n      if (typeof oldValue === 'boolean' || typeof oldValue === 'undefined') {\n        // if no value, negate false, and we have a default, then use it!\n        if (val == null) {\n          this.setOptionValue(name, option.negate\n            ? false\n            : defaultValue || true);\n        } else {\n          this.setOptionValue(name, val);\n        }\n      } else if (val !== null) {\n        // reassign\n        this.setOptionValue(name, option.negate ? false : val);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Internal implementation shared by .option() and .requiredOption()\n   *\n   * @api private\n   */\n  _optionEx(config, flags, description, fn, defaultValue) {\n    const option = this.createOption(flags, description);\n    option.makeOptionMandatory(!!config.mandatory);\n    if (typeof fn === 'function') {\n      option.default(defaultValue).argParser(fn);\n    } else if (fn instanceof RegExp) {\n      // deprecated\n      const regex = fn;\n      fn = (val, def) => {\n        const m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n      option.default(defaultValue).argParser(fn);\n    } else {\n      option.default(fn);\n    }\n\n    return this.addOption(option);\n  }\n\n  /**\n   * Define option with `flags`, `description` and optional\n   * coercion `fn`.\n   *\n   * The `flags` string contains the short and/or long flags,\n   * separated by comma, a pipe or space. The following are all valid\n   * all will output this way when `--help` is used.\n   *\n   *    \"-p, --pepper\"\n   *    \"-p|--pepper\"\n   *    \"-p --pepper\"\n   *\n   * Examples:\n   *\n   *     // simple boolean defaulting to undefined\n   *     program.option('-p, --pepper', 'add pepper');\n   *\n   *     program.pepper\n   *     // => undefined\n   *\n   *     --pepper\n   *     program.pepper\n   *     // => true\n   *\n   *     // simple boolean defaulting to true (unless non-negated option is also defined)\n   *     program.option('-C, --no-cheese', 'remove cheese');\n   *\n   *     program.cheese\n   *     // => true\n   *\n   *     --no-cheese\n   *     program.cheese\n   *     // => false\n   *\n   *     // required argument\n   *     program.option('-C, --chdir <path>', 'change the working directory');\n   *\n   *     --chdir /tmp\n   *     program.chdir\n   *     // => \"/tmp\"\n   *\n   *     // optional argument\n   *     program.option('-c, --cheese [type]', 'add cheese [marble]');\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {Function|*} [fn] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  option(flags, description, fn, defaultValue) {\n    return this._optionEx({}, flags, description, fn, defaultValue);\n  };\n\n  /**\n  * Add a required option which must have a value after parsing. This usually means\n  * the option must be specified on the command line. (Otherwise the same as .option().)\n  *\n  * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.\n  *\n  * @param {string} flags\n  * @param {string} [description]\n  * @param {Function|*} [fn] - custom option processing function or default value\n  * @param {*} [defaultValue]\n  * @return {Command} `this` command for chaining\n  */\n\n  requiredOption(flags, description, fn, defaultValue) {\n    return this._optionEx({ mandatory: true }, flags, description, fn, defaultValue);\n  };\n\n  /**\n   * Alter parsing of short flags with optional values.\n   *\n   * Examples:\n   *\n   *    // for `.option('-f,--flag [value]'):\n   *    .combineFlagAndOptionalValue(true)  // `-f80` is treated like `--flag=80`, this is the default behaviour\n   *    .combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`\n   *\n   * @param {Boolean} [combine=true] - if `true` or omitted, an optional value can be specified directly after the flag.\n   */\n  combineFlagAndOptionalValue(combine = true) {\n    this._combineFlagAndOptionalValue = !!combine;\n    return this;\n  };\n\n  /**\n   * Allow unknown options on the command line.\n   *\n   * @param {Boolean} [allowUnknown=true] - if `true` or omitted, no error will be thrown\n   * for unknown options.\n   */\n  allowUnknownOption(allowUnknown = true) {\n    this._allowUnknownOption = !!allowUnknown;\n    return this;\n  };\n\n  /**\n   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.\n   *\n   * @param {Boolean} [allowExcess=true] - if `true` or omitted, no error will be thrown\n   * for excess arguments.\n   */\n  allowExcessArguments(allowExcess = true) {\n    this._allowExcessArguments = !!allowExcess;\n    return this;\n  };\n\n  /**\n   * Enable positional options. Positional means global options are specified before subcommands which lets\n   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.\n   * The default behaviour is non-positional and global options may appear anywhere on the command line.\n   *\n   * @param {Boolean} [positional=true]\n   */\n  enablePositionalOptions(positional = true) {\n    this._enablePositionalOptions = !!positional;\n    return this;\n  };\n\n  /**\n   * Pass through options that come after command-arguments rather than treat them as command-options,\n   * so actual command-options come before command-arguments. Turning this on for a subcommand requires\n   * positional options to have been enabled on the program (parent commands).\n   * The default behaviour is non-positional and options may appear before or after command-arguments.\n   *\n   * @param {Boolean} [passThrough=true]\n   * for unknown options.\n   */\n  passThroughOptions(passThrough = true) {\n    this._passThroughOptions = !!passThrough;\n    if (!!this.parent && passThrough && !this.parent._enablePositionalOptions) {\n      throw new Error('passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)');\n    }\n    return this;\n  };\n\n  /**\n    * Whether to store option values as properties on command object,\n    * or store separately (specify false). In both cases the option values can be accessed using .opts().\n    *\n    * @param {boolean} [storeAsProperties=true]\n    * @return {Command} `this` command for chaining\n    */\n\n  storeOptionsAsProperties(storeAsProperties = true) {\n    this._storeOptionsAsProperties = !!storeAsProperties;\n    if (this.options.length) {\n      throw new Error('call .storeOptionsAsProperties() before adding options');\n    }\n    return this;\n  };\n\n  /**\n   * Retrieve option value.\n   *\n   * @param {string} key\n   * @return {Object} value\n   */\n\n  getOptionValue(key) {\n    if (this._storeOptionsAsProperties) {\n      return this[key];\n    }\n    return this._optionValues[key];\n  };\n\n  /**\n   * Store option value.\n   *\n   * @param {string} key\n   * @param {Object} value\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValue(key, value) {\n    if (this._storeOptionsAsProperties) {\n      this[key] = value;\n    } else {\n      this._optionValues[key] = value;\n    }\n    return this;\n  };\n\n  /**\n   * Get user arguments implied or explicit arguments.\n   * Side-effects: set _scriptPath if args included application, and use that to set implicit command name.\n   *\n   * @api private\n   */\n\n  _prepareUserArgs(argv, parseOptions) {\n    if (argv !== undefined && !Array.isArray(argv)) {\n      throw new Error('first parameter to parse must be array or undefined');\n    }\n    parseOptions = parseOptions || {};\n\n    // Default to using process.argv\n    if (argv === undefined) {\n      argv = process.argv;\n      // @ts-ignore: unknown property\n      if (process.versions && process.versions.electron) {\n        parseOptions.from = 'electron';\n      }\n    }\n    this.rawArgs = argv.slice();\n\n    // make it a little easier for callers by supporting various argv conventions\n    let userArgs;\n    switch (parseOptions.from) {\n      case undefined:\n      case 'node':\n        this._scriptPath = argv[1];\n        userArgs = argv.slice(2);\n        break;\n      case 'electron':\n        // @ts-ignore: unknown property\n        if (process.defaultApp) {\n          this._scriptPath = argv[1];\n          userArgs = argv.slice(2);\n        } else {\n          userArgs = argv.slice(1);\n        }\n        break;\n      case 'user':\n        userArgs = argv.slice(0);\n        break;\n      default:\n        throw new Error(`unexpected parse option { from: '${parseOptions.from}' }`);\n    }\n    if (!this._scriptPath && require.main) {\n      this._scriptPath = require.main.filename;\n    }\n\n    // Guess name, used in usage in help.\n    this._name = this._name || (this._scriptPath && path.basename(this._scriptPath, path.extname(this._scriptPath)));\n\n    return userArgs;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * The default expectation is that the arguments are from node and have the application as argv[0]\n   * and the script being run in argv[1], with user parameters after that.\n   *\n   * Examples:\n   *\n   *      program.parse(process.argv);\n   *      program.parse(); // implicitly use process.argv and auto-detect node vs electron conventions\n   *      program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv] - optional, defaults to process.argv\n   * @param {Object} [parseOptions] - optionally specify style of options with from: node/user/electron\n   * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'\n   * @return {Command} `this` command for chaining\n   */\n\n  parse(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    this._parseCommand([], userArgs);\n\n    return this;\n  };\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Use parseAsync instead of parse if any of your action handlers are async. Returns a Promise.\n   *\n   * The default expectation is that the arguments are from node and have the application as argv[0]\n   * and the script being run in argv[1], with user parameters after that.\n   *\n   * Examples:\n   *\n   *      await program.parseAsync(process.argv);\n   *      await program.parseAsync(); // implicitly use process.argv and auto-detect node vs electron conventions\n   *      await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv]\n   * @param {Object} [parseOptions]\n   * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'\n   * @return {Promise}\n   */\n\n  async parseAsync(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    await this._parseCommand([], userArgs);\n\n    return this;\n  };\n\n  /**\n   * Execute a sub-command executable.\n   *\n   * @api private\n   */\n\n  _executeSubCommand(subcommand, args) {\n    args = args.slice();\n    let launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.\n    const sourceExt = ['.js', '.ts', '.tsx', '.mjs', '.cjs'];\n\n    // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.\n    this._checkForMissingMandatoryOptions();\n\n    // Want the entry script as the reference for command name and directory for searching for other files.\n    let scriptPath = this._scriptPath;\n    // Fallback in case not set, due to how Command created or called.\n    if (!scriptPath && require.main) {\n      scriptPath = require.main.filename;\n    }\n\n    let baseDir;\n    try {\n      const resolvedLink = fs.realpathSync(scriptPath);\n      baseDir = path.dirname(resolvedLink);\n    } catch (e) {\n      baseDir = '.'; // dummy, probably not going to find executable!\n    }\n\n    // name of the subcommand, like `pm-install`\n    let bin = path.basename(scriptPath, path.extname(scriptPath)) + '-' + subcommand._name;\n    if (subcommand._executableFile) {\n      bin = subcommand._executableFile;\n    }\n\n    const localBin = path.join(baseDir, bin);\n    if (fs.existsSync(localBin)) {\n      // prefer local `./<bin>` to bin in the $PATH\n      bin = localBin;\n    } else {\n      // Look for source files.\n      sourceExt.forEach((ext) => {\n        if (fs.existsSync(`${localBin}${ext}`)) {\n          bin = `${localBin}${ext}`;\n        }\n      });\n    }\n    launchWithNode = sourceExt.includes(path.extname(bin));\n\n    let proc;\n    if (process.platform !== 'win32') {\n      if (launchWithNode) {\n        args.unshift(bin);\n        // add executable arguments to spawn\n        args = incrementNodeInspectorPort(process.execArgv).concat(args);\n\n        proc = childProcess.spawn(process.argv[0], args, { stdio: 'inherit' });\n      } else {\n        proc = childProcess.spawn(bin, args, { stdio: 'inherit' });\n      }\n    } else {\n      args.unshift(bin);\n      // add executable arguments to spawn\n      args = incrementNodeInspectorPort(process.execArgv).concat(args);\n      proc = childProcess.spawn(process.execPath, args, { stdio: 'inherit' });\n    }\n\n    const signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n    signals.forEach((signal) => {\n      // @ts-ignore\n      process.on(signal, () => {\n        if (proc.killed === false && proc.exitCode === null) {\n          proc.kill(signal);\n        }\n      });\n    });\n\n    // By default terminate process when spawned process terminates.\n    // Suppressing the exit if exitCallback defined is a bit messy and of limited use, but does allow process to stay running!\n    const exitCallback = this._exitCallback;\n    if (!exitCallback) {\n      proc.on('close', process.exit.bind(process));\n    } else {\n      proc.on('close', () => {\n        exitCallback(new CommanderError(process.exitCode || 0, 'commander.executeSubCommandAsync', '(close)'));\n      });\n    }\n    proc.on('error', (err) => {\n      // @ts-ignore\n      if (err.code === 'ENOENT') {\n        const executableMissing = `'${bin}' does not exist\n - if '${subcommand._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\n - if the default executable name is not suitable, use the executableFile option to supply a custom name`;\n        throw new Error(executableMissing);\n      // @ts-ignore\n      } else if (err.code === 'EACCES') {\n        throw new Error(`'${bin}' not executable`);\n      }\n      if (!exitCallback) {\n        process.exit(1);\n      } else {\n        const wrappedError = new CommanderError(1, 'commander.executeSubCommandAsync', '(error)');\n        wrappedError.nestedError = err;\n        exitCallback(wrappedError);\n      }\n    });\n\n    // Store the reference to the child process\n    this.runningCommand = proc;\n  };\n\n  /**\n   * @api private\n   */\n\n  _dispatchSubcommand(commandName, operands, unknown) {\n    const subCommand = this._findCommand(commandName);\n    if (!subCommand) this.help({ error: true });\n\n    if (subCommand._executableHandler) {\n      this._executeSubCommand(subCommand, operands.concat(unknown));\n    } else {\n      return subCommand._parseCommand(operands, unknown);\n    }\n  };\n\n  /**\n   * Check this.args against expected this._args.\n   *\n   * @api private\n   */\n\n  _checkNumberOfArguments() {\n    // too few\n    this._args.forEach((arg, i) => {\n      if (arg.required && this.args[i] == null) {\n        this.missingArgument(arg.name());\n      }\n    });\n    // too many\n    if (this._args.length > 0 && this._args[this._args.length - 1].variadic) {\n      return;\n    }\n    if (this.args.length > this._args.length) {\n      this._excessArguments(this.args);\n    }\n  };\n\n  /**\n   * Process this.args using this._args and save as this.processedArgs!\n   *\n   * @api private\n   */\n\n  _processArguments() {\n    const myParseArg = (argument, value, previous) => {\n      // Extra processing for nice error message on parsing failure.\n      let parsedValue = value;\n      if (value !== null && argument.parseArg) {\n        try {\n          parsedValue = argument.parseArg(value, previous);\n        } catch (err) {\n          if (err.code === 'commander.invalidArgument') {\n            const message = `error: command-argument value '${value}' is invalid for argument '${argument.name()}'. ${err.message}`;\n            this._displayError(err.exitCode, err.code, message);\n          }\n          throw err;\n        }\n      }\n      return parsedValue;\n    };\n\n    this._checkNumberOfArguments();\n\n    const processedArgs = [];\n    this._args.forEach((declaredArg, index) => {\n      let value = declaredArg.defaultValue;\n      if (declaredArg.variadic) {\n        // Collect together remaining arguments for passing together as an array.\n        if (index < this.args.length) {\n          value = this.args.slice(index);\n          if (declaredArg.parseArg) {\n            value = value.reduce((processed, v) => {\n              return myParseArg(declaredArg, v, processed);\n            }, declaredArg.defaultValue);\n          }\n        } else if (value === undefined) {\n          value = [];\n        }\n      } else if (index < this.args.length) {\n        value = this.args[index];\n        if (declaredArg.parseArg) {\n          value = myParseArg(declaredArg, value, declaredArg.defaultValue);\n        }\n      }\n      processedArgs[index] = value;\n    });\n    this.processedArgs = processedArgs;\n  }\n\n  /**\n   * Once we have a promise we chain, but call synchronously until then.\n   *\n   * @param {Promise|undefined} promise\n   * @param {Function} fn\n   * @return {Promise|undefined}\n   */\n\n  _chainOrCall(promise, fn) {\n    // thenable\n    if (promise && promise.then && typeof promise.then === 'function') {\n      // already have a promise, chain callback\n      return promise.then(() => fn());\n    }\n    // callback might return a promise\n    return fn();\n  }\n\n  /**\n   *\n   * @param {Promise|undefined} promise\n   * @param {string} event\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCallHooks(promise, event) {\n    let result = promise;\n    const hooks = [];\n    getCommandAndParents(this)\n      .reverse()\n      .filter(cmd => cmd._lifeCycleHooks[event] !== undefined)\n      .forEach(hookedCommand => {\n        hookedCommand._lifeCycleHooks[event].forEach((callback) => {\n          hooks.push({ hookedCommand, callback });\n        });\n      });\n    if (event === 'postAction') {\n      hooks.reverse();\n    }\n\n    hooks.forEach((hookDetail) => {\n      result = this._chainOrCall(result, () => {\n        return hookDetail.callback(hookDetail.hookedCommand, this);\n      });\n    });\n    return result;\n  }\n\n  /**\n   * Process arguments in context of this command.\n   * Returns action result, in case it is a promise.\n   *\n   * @api private\n   */\n\n  _parseCommand(operands, unknown) {\n    const parsed = this.parseOptions(unknown);\n    operands = operands.concat(parsed.operands);\n    unknown = parsed.unknown;\n    this.args = operands.concat(unknown);\n\n    if (operands && this._findCommand(operands[0])) {\n      return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);\n    }\n    if (this._hasImplicitHelpCommand() && operands[0] === this._helpCommandName) {\n      if (operands.length === 1) {\n        this.help();\n      }\n      return this._dispatchSubcommand(operands[1], [], [this._helpLongFlag]);\n    }\n    if (this._defaultCommandName) {\n      outputHelpIfRequested(this, unknown); // Run the help for default command from parent rather than passing to default command\n      return this._dispatchSubcommand(this._defaultCommandName, operands, unknown);\n    }\n    if (this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName) {\n      // probably missing subcommand and no handler, user needs help (and exit)\n      this.help({ error: true });\n    }\n\n    outputHelpIfRequested(this, parsed.unknown);\n    this._checkForMissingMandatoryOptions();\n\n    // We do not always call this check to avoid masking a \"better\" error, like unknown command.\n    const checkForUnknownOptions = () => {\n      if (parsed.unknown.length > 0) {\n        this.unknownOption(parsed.unknown[0]);\n      }\n    };\n\n    const commandEvent = `command:${this.name()}`;\n    if (this._actionHandler) {\n      checkForUnknownOptions();\n      this._processArguments();\n\n      let actionResult;\n      actionResult = this._chainOrCallHooks(actionResult, 'preAction');\n      actionResult = this._chainOrCall(actionResult, () => this._actionHandler(this.processedArgs));\n      if (this.parent) this.parent.emit(commandEvent, operands, unknown); // legacy\n      actionResult = this._chainOrCallHooks(actionResult, 'postAction');\n      return actionResult;\n    }\n    if (this.parent && this.parent.listenerCount(commandEvent)) {\n      checkForUnknownOptions();\n      this._processArguments();\n      this.parent.emit(commandEvent, operands, unknown); // legacy\n    } else if (operands.length) {\n      if (this._findCommand('*')) { // legacy default command\n        return this._dispatchSubcommand('*', operands, unknown);\n      }\n      if (this.listenerCount('command:*')) {\n        // skip option check, emit event for possible misspelling suggestion\n        this.emit('command:*', operands, unknown);\n      } else if (this.commands.length) {\n        this.unknownCommand();\n      } else {\n        checkForUnknownOptions();\n        this._processArguments();\n      }\n    } else if (this.commands.length) {\n      // This command has subcommands and nothing hooked up at this level, so display help (and exit).\n      this.help({ error: true });\n    } else {\n      checkForUnknownOptions();\n      this._processArguments();\n      // fall through for caller to handle after calling .parse()\n    }\n  };\n\n  /**\n   * Find matching command.\n   *\n   * @api private\n   */\n  _findCommand(name) {\n    if (!name) return undefined;\n    return this.commands.find(cmd => cmd._name === name || cmd._aliases.includes(name));\n  };\n\n  /**\n   * Return an option matching `arg` if any.\n   *\n   * @param {string} arg\n   * @return {Option}\n   * @api private\n   */\n\n  _findOption(arg) {\n    return this.options.find(option => option.is(arg));\n  };\n\n  /**\n   * Display an error message if a mandatory option does not have a value.\n   * Lazy calling after checking for help flags from leaf subcommand.\n   *\n   * @api private\n   */\n\n  _checkForMissingMandatoryOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    for (let cmd = this; cmd; cmd = cmd.parent) {\n      cmd.options.forEach((anOption) => {\n        if (anOption.mandatory && (cmd.getOptionValue(anOption.attributeName()) === undefined)) {\n          cmd.missingMandatoryOptionValue(anOption);\n        }\n      });\n    }\n  };\n\n  /**\n   * Parse options from `argv` removing known options,\n   * and return argv split into operands and unknown arguments.\n   *\n   * Examples:\n   *\n   *    argv => operands, unknown\n   *    --known kkk op => [op], []\n   *    op --known kkk => [op], []\n   *    sub --unknown uuu op => [sub], [--unknown uuu op]\n   *    sub -- --unknown uuu op => [sub --unknown uuu op], []\n   *\n   * @param {String[]} argv\n   * @return {{operands: String[], unknown: String[]}}\n   */\n\n  parseOptions(argv) {\n    const operands = []; // operands, not options or values\n    const unknown = []; // first unknown option and remaining unknown args\n    let dest = operands;\n    const args = argv.slice();\n\n    function maybeOption(arg) {\n      return arg.length > 1 && arg[0] === '-';\n    }\n\n    // parse options\n    let activeVariadicOption = null;\n    while (args.length) {\n      const arg = args.shift();\n\n      // literal\n      if (arg === '--') {\n        if (dest === unknown) dest.push(arg);\n        dest.push(...args);\n        break;\n      }\n\n      if (activeVariadicOption && !maybeOption(arg)) {\n        this.emit(`option:${activeVariadicOption.name()}`, arg);\n        continue;\n      }\n      activeVariadicOption = null;\n\n      if (maybeOption(arg)) {\n        const option = this._findOption(arg);\n        // recognised option, call listener to assign value with possible custom processing\n        if (option) {\n          if (option.required) {\n            const value = args.shift();\n            if (value === undefined) this.optionMissingArgument(option);\n            this.emit(`option:${option.name()}`, value);\n          } else if (option.optional) {\n            let value = null;\n            // historical behaviour is optional value is following arg unless an option\n            if (args.length > 0 && !maybeOption(args[0])) {\n              value = args.shift();\n            }\n            this.emit(`option:${option.name()}`, value);\n          } else { // boolean flag\n            this.emit(`option:${option.name()}`);\n          }\n          activeVariadicOption = option.variadic ? option : null;\n          continue;\n        }\n      }\n\n      // Look for combo options following single dash, eat first one if known.\n      if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\n        const option = this._findOption(`-${arg[1]}`);\n        if (option) {\n          if (option.required || (option.optional && this._combineFlagAndOptionalValue)) {\n            // option with value following in same argument\n            this.emit(`option:${option.name()}`, arg.slice(2));\n          } else {\n            // boolean option, emit and put back remainder of arg for further processing\n            this.emit(`option:${option.name()}`);\n            args.unshift(`-${arg.slice(2)}`);\n          }\n          continue;\n        }\n      }\n\n      // Look for known long flag with value, like --foo=bar\n      if (/^--[^=]+=/.test(arg)) {\n        const index = arg.indexOf('=');\n        const option = this._findOption(arg.slice(0, index));\n        if (option && (option.required || option.optional)) {\n          this.emit(`option:${option.name()}`, arg.slice(index + 1));\n          continue;\n        }\n      }\n\n      // Not a recognised option by this command.\n      // Might be a command-argument, or subcommand option, or unknown option, or help command or option.\n\n      // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.\n      if (maybeOption(arg)) {\n        dest = unknown;\n      }\n\n      // If using positionalOptions, stop processing our options at subcommand.\n      if ((this._enablePositionalOptions || this._passThroughOptions) && operands.length === 0 && unknown.length === 0) {\n        if (this._findCommand(arg)) {\n          operands.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        } else if (arg === this._helpCommandName && this._hasImplicitHelpCommand()) {\n          operands.push(arg);\n          if (args.length > 0) operands.push(...args);\n          break;\n        } else if (this._defaultCommandName) {\n          unknown.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        }\n      }\n\n      // If using passThroughOptions, stop processing options at first command-argument.\n      if (this._passThroughOptions) {\n        dest.push(arg);\n        if (args.length > 0) dest.push(...args);\n        break;\n      }\n\n      // add arg\n      dest.push(arg);\n    }\n\n    return { operands, unknown };\n  };\n\n  /**\n   * Return an object containing options as key-value pairs\n   *\n   * @return {Object}\n   */\n  opts() {\n    if (this._storeOptionsAsProperties) {\n      // Preserve original behaviour so backwards compatible when still using properties\n      const result = {};\n      const len = this.options.length;\n\n      for (let i = 0; i < len; i++) {\n        const key = this.options[i].attributeName();\n        result[key] = key === this._versionOptionName ? this._version : this[key];\n      }\n      return result;\n    }\n\n    return this._optionValues;\n  };\n\n  /**\n   * Internal bottleneck for handling of parsing errors.\n   *\n   * @api private\n   */\n  _displayError(exitCode, code, message) {\n    this._outputConfiguration.outputError(`${message}\\n`, this._outputConfiguration.writeErr);\n    if (typeof this._showHelpAfterError === 'string') {\n      this._outputConfiguration.writeErr(`${this._showHelpAfterError}\\n`);\n    } else if (this._showHelpAfterError) {\n      this._outputConfiguration.writeErr('\\n');\n      this.outputHelp({ error: true });\n    }\n    this._exit(exitCode, code, message);\n  }\n\n  /**\n   * Argument `name` is missing.\n   *\n   * @param {string} name\n   * @api private\n   */\n\n  missingArgument(name) {\n    const message = `error: missing required argument '${name}'`;\n    this._displayError(1, 'commander.missingArgument', message);\n  };\n\n  /**\n   * `Option` is missing an argument.\n   *\n   * @param {Option} option\n   * @api private\n   */\n\n  optionMissingArgument(option) {\n    const message = `error: option '${option.flags}' argument missing`;\n    this._displayError(1, 'commander.optionMissingArgument', message);\n  };\n\n  /**\n   * `Option` does not have a value, and is a mandatory option.\n   *\n   * @param {Option} option\n   * @api private\n   */\n\n  missingMandatoryOptionValue(option) {\n    const message = `error: required option '${option.flags}' not specified`;\n    this._displayError(1, 'commander.missingMandatoryOptionValue', message);\n  };\n\n  /**\n   * Unknown option `flag`.\n   *\n   * @param {string} flag\n   * @api private\n   */\n\n  unknownOption(flag) {\n    if (this._allowUnknownOption) return;\n    const message = `error: unknown option '${flag}'`;\n    this._displayError(1, 'commander.unknownOption', message);\n  };\n\n  /**\n   * Excess arguments, more than expected.\n   *\n   * @param {string[]} receivedArgs\n   * @api private\n   */\n\n  _excessArguments(receivedArgs) {\n    if (this._allowExcessArguments) return;\n\n    const expected = this._args.length;\n    const s = (expected === 1) ? '' : 's';\n    const forSubcommand = this.parent ? ` for '${this.name()}'` : '';\n    const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;\n    this._displayError(1, 'commander.excessArguments', message);\n  };\n\n  /**\n   * Unknown command.\n   *\n   * @api private\n   */\n\n  unknownCommand() {\n    const message = `error: unknown command '${this.args[0]}'`;\n    this._displayError(1, 'commander.unknownCommand', message);\n  };\n\n  /**\n   * Set the program version to `str`.\n   *\n   * This method auto-registers the \"-V, --version\" flag\n   * which will print the version number when passed.\n   *\n   * You can optionally supply the  flags and description to override the defaults.\n   *\n   * @param {string} str\n   * @param {string} [flags]\n   * @param {string} [description]\n   * @return {this | string} `this` command for chaining, or version string if no arguments\n   */\n\n  version(str, flags, description) {\n    if (str === undefined) return this._version;\n    this._version = str;\n    flags = flags || '-V, --version';\n    description = description || 'output the version number';\n    const versionOption = this.createOption(flags, description);\n    this._versionOptionName = versionOption.attributeName();\n    this.options.push(versionOption);\n    this.on('option:' + versionOption.name(), () => {\n      this._outputConfiguration.writeOut(`${str}\\n`);\n      this._exit(0, 'commander.version', str);\n    });\n    return this;\n  };\n\n  /**\n   * Set the description to `str`.\n   *\n   * @param {string} [str]\n   * @param {Object} [argsDescription]\n   * @return {string|Command}\n   */\n  description(str, argsDescription) {\n    if (str === undefined && argsDescription === undefined) return this._description;\n    this._description = str;\n    if (argsDescription) {\n      this._argsDescription = argsDescription;\n    }\n    return this;\n  };\n\n  /**\n   * Set an alias for the command.\n   *\n   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string} [alias]\n   * @return {string|Command}\n   */\n\n  alias(alias) {\n    if (alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility\n\n    /** @type {Command} */\n    let command = this;\n    if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler) {\n      // assume adding alias for last added executable subcommand, rather than this\n      command = this.commands[this.commands.length - 1];\n    }\n\n    if (alias === command._name) throw new Error('Command alias can\\'t be the same as its name');\n\n    command._aliases.push(alias);\n    return this;\n  };\n\n  /**\n   * Set aliases for the command.\n   *\n   * Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string[]} [aliases]\n   * @return {string[]|Command}\n   */\n\n  aliases(aliases) {\n    // Getter for the array of aliases is the main reason for having aliases() in addition to alias().\n    if (aliases === undefined) return this._aliases;\n\n    aliases.forEach((alias) => this.alias(alias));\n    return this;\n  };\n\n  /**\n   * Set / get the command usage `str`.\n   *\n   * @param {string} [str]\n   * @return {String|Command}\n   */\n\n  usage(str) {\n    if (str === undefined) {\n      if (this._usage) return this._usage;\n\n      const args = this._args.map((arg) => {\n        return humanReadableArgName(arg);\n      });\n      return [].concat(\n        (this.options.length || this._hasHelpOption ? '[options]' : []),\n        (this.commands.length ? '[command]' : []),\n        (this._args.length ? args : [])\n      ).join(' ');\n    }\n\n    this._usage = str;\n    return this;\n  };\n\n  /**\n   * Get or set the name of the command\n   *\n   * @param {string} [str]\n   * @return {string|Command}\n   */\n\n  name(str) {\n    if (str === undefined) return this._name;\n    this._name = str;\n    return this;\n  };\n\n  /**\n   * Return program help documentation.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout\n   * @return {string}\n   */\n\n  helpInformation(contextOptions) {\n    const helper = this.createHelp();\n    if (helper.helpWidth === undefined) {\n      helper.helpWidth = (contextOptions && contextOptions.error) ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth();\n    }\n    return helper.formatHelp(this, helper);\n  };\n\n  /**\n   * @api private\n   */\n\n  _getHelpContext(contextOptions) {\n    contextOptions = contextOptions || {};\n    const context = { error: !!contextOptions.error };\n    let write;\n    if (context.error) {\n      write = (arg) => this._outputConfiguration.writeErr(arg);\n    } else {\n      write = (arg) => this._outputConfiguration.writeOut(arg);\n    }\n    context.write = contextOptions.write || write;\n    context.command = this;\n    return context;\n  }\n\n  /**\n   * Output help information for this command.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  outputHelp(contextOptions) {\n    let deprecatedCallback;\n    if (typeof contextOptions === 'function') {\n      deprecatedCallback = contextOptions;\n      contextOptions = undefined;\n    }\n    const context = this._getHelpContext(contextOptions);\n\n    const groupListeners = [];\n    let command = this;\n    while (command) {\n      groupListeners.push(command); // ordered from current command to root\n      command = command.parent;\n    }\n\n    groupListeners.slice().reverse().forEach(command => command.emit('beforeAllHelp', context));\n    this.emit('beforeHelp', context);\n\n    let helpInformation = this.helpInformation(context);\n    if (deprecatedCallback) {\n      helpInformation = deprecatedCallback(helpInformation);\n      if (typeof helpInformation !== 'string' && !Buffer.isBuffer(helpInformation)) {\n        throw new Error('outputHelp callback must return a string or a Buffer');\n      }\n    }\n    context.write(helpInformation);\n\n    this.emit(this._helpLongFlag); // deprecated\n    this.emit('afterHelp', context);\n    groupListeners.forEach(command => command.emit('afterAllHelp', context));\n  };\n\n  /**\n   * You can pass in flags and a description to override the help\n   * flags and help description for your command. Pass in false to\n   * disable the built-in help option.\n   *\n   * @param {string | boolean} [flags]\n   * @param {string} [description]\n   * @return {Command} `this` command for chaining\n   */\n\n  helpOption(flags, description) {\n    if (typeof flags === 'boolean') {\n      this._hasHelpOption = flags;\n      return this;\n    }\n    this._helpFlags = flags || this._helpFlags;\n    this._helpDescription = description || this._helpDescription;\n\n    const helpFlags = splitOptionFlags(this._helpFlags);\n    this._helpShortFlag = helpFlags.shortFlag;\n    this._helpLongFlag = helpFlags.longFlag;\n\n    return this;\n  };\n\n  /**\n   * Output help information and exit.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  help(contextOptions) {\n    this.outputHelp(contextOptions);\n    let exitCode = process.exitCode || 0;\n    if (exitCode === 0 && contextOptions && typeof contextOptions !== 'function' && contextOptions.error) {\n      exitCode = 1;\n    }\n    // message: do not have all displayed text available so only passing placeholder.\n    this._exit(exitCode, 'commander.help', '(outputHelp)');\n  };\n\n  /**\n   * Add additional text to be displayed with the built-in help.\n   *\n   * Position is 'before' or 'after' to affect just this command,\n   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.\n   *\n   * @param {string} position - before or after built-in help\n   * @param {string | Function} text - string to add, or a function returning a string\n   * @return {Command} `this` command for chaining\n   */\n  addHelpText(position, text) {\n    const allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];\n    if (!allowedValues.includes(position)) {\n      throw new Error(`Unexpected value for position to addHelpText.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    const helpEvent = `${position}Help`;\n    this.on(helpEvent, (context) => {\n      let helpStr;\n      if (typeof text === 'function') {\n        helpStr = text({ error: context.error, command: context.command });\n      } else {\n        helpStr = text;\n      }\n      // Ignore falsy value when nothing to output.\n      if (helpStr) {\n        context.write(`${helpStr}\\n`);\n      }\n    });\n    return this;\n  }\n};\n\n/**\n * Output help information if help flags specified\n *\n * @param {Command} cmd - command to output help for\n * @param {Array} args - array of options to search for help flags\n * @api private\n */\n\nfunction outputHelpIfRequested(cmd, args) {\n  const helpOption = cmd._hasHelpOption && args.find(arg => arg === cmd._helpLongFlag || arg === cmd._helpShortFlag);\n  if (helpOption) {\n    cmd.outputHelp();\n    // (Do not have all displayed text available so only passing placeholder.)\n    cmd._exit(0, 'commander.helpDisplayed', '(outputHelp)');\n  }\n}\n\n/**\n * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).\n *\n * @param {string[]} args - array of arguments from node.execArgv\n * @returns {string[]}\n * @api private\n */\n\nfunction incrementNodeInspectorPort(args) {\n  // Testing for these options:\n  //  --inspect[=[host:]port]\n  //  --inspect-brk[=[host:]port]\n  //  --inspect-port=[host:]port\n  return args.map((arg) => {\n    if (!arg.startsWith('--inspect')) {\n      return arg;\n    }\n    let debugOption;\n    let debugHost = '127.0.0.1';\n    let debugPort = '9229';\n    let match;\n    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\n      // e.g. --inspect\n      debugOption = match[1];\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null) {\n      debugOption = match[1];\n      if (/^\\d+$/.test(match[3])) {\n        // e.g. --inspect=1234\n        debugPort = match[3];\n      } else {\n        // e.g. --inspect=localhost\n        debugHost = match[3];\n      }\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null) {\n      // e.g. --inspect=localhost:1234\n      debugOption = match[1];\n      debugHost = match[3];\n      debugPort = match[4];\n    }\n\n    if (debugOption && debugPort !== '0') {\n      return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;\n    }\n    return arg;\n  });\n}\n\n/**\n * @param {Command} startCommand\n * @returns {Command[]}\n * @api private\n */\n\nfunction getCommandAndParents(startCommand) {\n  const result = [];\n  for (let command = startCommand; command; command = command.parent) {\n    result.push(command);\n  }\n  return result;\n}\n\nexports.Command = Command;\n", "const { Argument } = require('./lib/argument.js');\nconst { Command } = require('./lib/command.js');\nconst { CommanderError, InvalidArgumentError } = require('./lib/error.js');\nconst { Help } = require('./lib/help.js');\nconst { Option } = require('./lib/option.js');\n\n// @ts-check\n\n/**\n * Expose the root command.\n */\n\nexports = module.exports = new Command();\nexports.program = exports; // More explicit access to global command.\n// Implicit export of createArgument, createCommand, and createOption.\n\n/**\n * Expose classes\n */\n\nexports.Argument = Argument;\nexports.Command = Command;\nexports.CommanderError = CommanderError;\nexports.Help = Help;\nexports.InvalidArgumentError = InvalidArgumentError;\nexports.InvalidOptionArgumentError = InvalidArgumentError; // Deprecated\nexports.Option = Option;\n", "import { Command } from \"commander\";\n\nconst program = new Command();\n\nprogram\n  .version(\"0.1.0\")\n  .command(\"rmdir\")\n  .argument(\"<dirs...>\")\n  .action(function (dirs) {\n    dirs.forEach((dir) => {\n      console.log(\"rmdir %s\", dir);\n    });\n  });\n\nprogram.parse(process.argv);\n"],
  "mappings": "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",
  "names": []
}
